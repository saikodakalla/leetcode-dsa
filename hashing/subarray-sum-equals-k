from collections import defaultdict

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        # counts will map prefix sums â†’ frequency (how many times we've seen that prefix sum)
        counts = defaultdict(int)

        # initialize with counts[0] = 1 because the empty prefix has sum 0
        # this lets us count subarrays that start at index 0
        counts[0] = 1

        # ans = total number of valid subarrays found
        # curr = running prefix sum as we move through nums
        ans = curr = 0

        # iterate over each number in the array
        for num in nums:
            # update the running prefix sum
            curr += num

            # check if there was a prefix sum (curr - k) earlier
            # if so, then the subarray between that prefix and the current index sums to k
            ans += counts[curr - k]

            # record that we've now seen this prefix sum
            counts[curr] += 1
    
        # return the total number of valid subarrays
        return ans
 
for subarray sum equals k, the reason we create the prefix sum is because if we take the current value of the prefix sum and then substract our k value from it (what we want our total sum of subarray to equal), 
and we get a number that exists in our prefix sum beforehand, that means that there is a specific part of the array before the subarray that we can chop off to give us the subarray of sum k alone (NeetCode Video)
https://www.youtube.com/watch?v=fFVZt-6sgyo
